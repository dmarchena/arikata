/**
 * @typedef AuthSession
 * @property {function()} discardAuthentication - Logout. Destroy current session.
 * @property {function():Object} getAuthentication - Get authentication data of signed user
 * @property {function():boolean} isAdmin - Check if authenticated user is an admin
 * @property {function():boolean} isAuthenticated - Check if there is authenticated user
 * @property {function(Object)} saveAuthentication - Save authentication data of user
 */

/**
 * @typedef {Object} KataAggregate
 * @property {string} id uuid
 * @property {string} name The name of the kata
 * @property {string} details The information of the kata
 * @property {string} code The initial code of the kata
 * @property {string} test The test to validate the kata
 * @property {TagEntity[]} tags The tags assigned to the kata
 */

/**
 * @typedef {Object} KataDto
 * @property {string} id uuid
 * @property {string} name The name of the kata
 * @property {string} details The information of the kata
 * @property {string} code The initial code of the kata
 * @property {string} test The test to validate the kata
 * @property {string[]} tags The tags assigned to the kata
 */

/**
 * @typedef KataRepo
 * @property {function():Promise.<KataAggregate[]>} getAllKatas Return all the katas
 * @property {function(string):Promise.<KataAggregate[]>} getAllKatasWithTag Return all the katas that are tagged with the given tag
 * @property {function():Promise.<TagEntity[]>} getAllTags Return all the available tags
 * @property {function(string):Promise.<KataAggregate>} getKataWithId Fetch a kata
 * @property {function(string):Promise.<Boolean>} remove Removes a Kata
 * @property {function(KataAggregate):Promise.<KataAggregate>} save Save new Kata
 * @property {function(KataAggregate):Promise.<KataAggregate>} update Update a Kata
 */

/**
 * @typedef {Object} TagEntity
 * @property {string} id uuid
 * @property {string} tag The label of the kata
 */

/**
 * @typedef {Object} UserAggregate
 * @property {string} id The ID of the user
 * @property {string} email The email of the user
 * @property {string} password The password of the user
 * @property {string} role The role ID of the user
 * @property {string} accessToken JSON Web Token (JWT) generated by auth server
 */

/**
 * @typedef {Object} UserResponseDto
 * @property {string} id The ID of the user
 * @property {string} email The email of the user
 * @property {string} role The role ID of the user
 * @property {string} accessToken JSON Web Token (JWT) generated by auth server
 */

/**
 * @typedef UserRepo
 * @property {function(UserAggregate):Promise.<UserAggregate>} login Login the user. Returns null if it does not exists or the pass is not correct.
 * @property {function(UserAggregate):undefined} logout End user session
 * @property {function(UserAggregate):Promise.<UserAggregate>} save Save new user. Returns false if user already exist.
 * @property {function(UserAggregate):Promise.<UserAggregate>} update Updates user data.
 */
